// line-bot-vyw-gemini.js (р╕зр╕┤р╕з р╣Ар╕зр╕нр╕гр╣Мр╕Кр╕▒р╕Щр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З Gemini 1.5 Flash)

const express = require("express");
const { Client } = require("@line/bot-sdk");
const axios = require("axios");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;

const config = {
  channelAccessToken: process.env.LINE_ACCESS_TOKEN,
  channelSecret: process.env.LINE_SECRET,
};

const client = new Client(config);
app.use(express.json());

// --- Start of Improvement ---

// 1. р╣Ар╕Юр╕┤р╣Ир╕б Object р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Бр╣Зр╕Ъ Context р╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Бр╕Хр╣Ир╕ер╕░р╕Др╕Щ
//    р╣Ар╕Юр╕╖р╣Ир╕нр╕Ир╕Фр╕Ир╕│р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╣Ир╕▓р╕кр╕╕р╕Фр╕Чр╕╡р╣Ир╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕кр╣Ир╕Зр╕бр╕▓р╕Бр╣Ир╕нр╕Щр╕Ир╕░р╕кр╣Ир╕Зр╕гр╕╣р╕Ыр╕ар╕▓р╕Ю
const userContext = {};

// 2. р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Ар╕гр╕╡р╕вр╕Б Gemini API р╕кр╕│р╕лр╕гр╕▒р╕Ър╕гр╕╣р╕Ыр╕ар╕▓р╕Ю
async function callGeminiVisionAPI(prompt, imageBase64) {
  try {
    // 2.1 р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Др╕Ыр╣Гр╕Кр╣Йр╣Вр╕бр╣Ар╕Фр╕е gemini-1.5-flash-latest р╕Лр╕╢р╣Ир╕Зр╣Ар╕лр╕бр╕▓р╕░р╕Бр╕▒р╕Ър╕Зр╕▓р╕Щ Vision р╕бр╕▓р╕Бр╕Вр╕╢р╣Йр╕Щ
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${process.env.GEMINI_API_KEY}`;

    // 2.2 р╕Ыр╕гр╕▒р╕Ър╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕З `contents` р╣Гр╕лр╣Йр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕кр╣Ир╕З Text р╣Бр╕ер╕░ Image р╕Юр╕гр╣Йр╕нр╕бр╕Бр╕▒р╕Щ
    const requestBody = {
      contents: [{
        parts: [
          { text: prompt }, // р╣Гр╕кр╣И prompt р╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Ир╕▓р╕Бр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
          {
            inline_data: {
              mime_type: "image/jpeg",
              data: imageBase64,
            },
          },
        ],
      }],
    };

    const response = await axios.post(apiUrl, requestBody, {
      headers: { "Content-Type": "application/json" },
    });

    const aiResponse = response.data?.candidates?.[0]?.content?.parts?.[0]?.text || "р╕нр╣Кр╕░ р╕зр╕┤р╕зр╕вр╕▒р╕Зр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕ар╕▓р╕Юр╕Щр╕╡р╣Йр╣Др╕бр╣Ир╣Др╕Фр╣Йр╣Ар╕ер╕в р╕ер╕нр╕Зр╣Гр╕лр╕бр╣Ир╕Щр╕░р╕Др╕░ ЁЯШЬ";
    return aiResponse;
  } catch (error) {
    console.error("Error calling Gemini Vision API:", error.response?.data || error.message);
    return "р╕зр╕┤р╕зр╕Вр╕нр╣Вр╕Чр╕йр╕Щр╕░р╕Др╕░ р╕Хр╕нр╕Щр╕Щр╕╡р╣Йр╕вр╕▒р╕Зр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕ар╕▓р╕Юр╕Щр╕╡р╣Йр╣Др╕бр╣Ир╣Др╕Фр╣Й р╕ер╕нр╕Зр╣Гр╕лр╕бр╣Ир╕нр╕╡р╕Бр╕Чр╕╡р╕Щр╕░р╕Др╕░ ЁЯТЫ";
  }
}

// --- End of Improvement ---

// р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕гр╕╡р╕вр╕Б API (р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Шр╕гр╕гр╕бр╕Фр╕▓) р╕вр╕▒р╕Зр╕Др╕Зр╣Ар╕Фр╕┤р╕б
async function callGeminiAPI(userMessage) {
  try {
    const response = await axios.post(
      // р╣Гр╕Кр╣Йр╣Вр╕бр╣Ар╕Фр╕е Flash р╕Хр╕▒р╕зр╕ер╣Ир╕▓р╕кр╕╕р╕Фр╣Ар╕Юр╕╖р╣Ир╕нр╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Юр╕Чр╕╡р╣Ир╕Фр╕╡
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${process.env.GEMINI_API_KEY}`,
      {
        contents: [{ parts: [{ text: userMessage }] }],
      },
      { headers: { "Content-Type": "application/json" } }
    );
    const aiResponse = response.data?.candidates?.[0]?.content?.parts?.[0]?.text || "р╕нр╣Кр╕░ р╕зр╕┤р╕зр╕вр╕▒р╕Зр╕Хр╕нр╕Ър╣Ар╕гр╕╖р╣Ир╕нр╕Зр╕Щр╕╡р╣Йр╣Др╕бр╣Ир╣Др╕Фр╣Йр╣Ар╕ер╕в р╕ер╕нр╕Зр╕Цр╕▓р╕бр╣Гр╕лр╕бр╣Ир╕Щр╕░р╕Др╕░ ЁЯШЬ";
    return aiResponse;
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    return "р╕Вр╕нр╣Вр╕Чр╕йр╕Щр╕░р╕Др╕░ р╕Хр╕нр╕Щр╕Щр╕╡р╣Йр╕Др╕Щр╣Гр╕Кр╣Йр╣Ар╕вр╕нр╕░ р╕зр╕┤р╕зр╕Зр╕нр╣Бр╕Зр╕Щр╕┤р╕Фр╕Щр╕╢р╕З р╕ер╕нр╕Зр╣Гр╕лр╕бр╣Ир╕нр╕╡р╕Бр╕Чр╕╡р╕Щр╕░р╕Др╕░ ЁЯТЫ";
  }
}


async function getImageFromLine(messageId) {
  try {
    const url = `https://api-data.line.me/v2/bot/message/${messageId}/content`;
    const response = await axios.get(url, {
      headers: { Authorization: `Bearer ${process.env.LINE_ACCESS_TOKEN}` },
      responseType: "arraybuffer",
    });
    const imageBase64 = Buffer.from(response.data, "binary").toString("base64");
    return imageBase64;
  } catch (error) {
    console.error("Error downloading image from LINE:", error);
    return null;
  }
}

app.post("/webhook", async (req, res) => {
  const events = req.body.events;
  for (const event of events) {
    if (event.type === "message") {
      const userId = event.source.userId; // р╕Фр╕╢р╕З userId р╕бр╕▓р╣Гр╕Кр╣Йр╣Ар╕Ыр╣Зр╕Щ key

      if (event.message.type === "text") {
        const userMessage = event.message.text;

        // --- Improvement ---
        // 3. р╕Ир╕▒р╕Фр╣Ар╕Бр╣Зр╕Ър╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╣Ир╕▓р╕кр╕╕р╕Фр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕ер╕Зр╣Гр╕Щ context
        userContext[userId] = {
          text: userMessage,
          timestamp: Date.now() // р╣Ар╕Бр╣Зр╕Ър╣Ар╕зр╕ер╕▓р╣Др╕зр╣Йр╕Фр╣Йр╕зр╕в р╣Ар╕Ьр╕╖р╣Ир╕нр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕ер╕Ъ context р╕Чр╕╡р╣Ир╣Ар╕Бр╣Ир╕▓р╣Ар╕Бр╕┤р╕Щр╣Др╕Ы
        };

        const aiResponse = await callGeminiAPI(userMessage);
        await client.replyMessage(event.replyToken, { type: "text", text: aiResponse });

      } else if (event.message.type === "image") {
        const imageBase64 = await getImageFromLine(event.message.id);
        if (!imageBase64) {
          await client.replyMessage(event.replyToken, { type: "text", text: "р╕нр╣Кр╕░ р╕зр╕┤р╕зр╕вр╕▒р╕Зр╣Вр╕лр╕ер╕Фр╕гр╕╣р╕Ыр╕Щр╕╡р╣Йр╣Др╕бр╣Ир╣Др╕Фр╣Й р╕ер╕нр╕Зр╕кр╣Ир╕Зр╣Гр╕лр╕бр╣Ир╕нр╕╡р╕Бр╕Чр╕╡р╕Щр╕░р╕Др╕░ ЁЯШЬ" });
          return;
        }

        // --- Improvement ---
        // 4. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡ context (р╕Др╕│р╕Цр╕▓р╕б) р╕Ир╕▓р╕Бр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Др╕Щр╕Щр╕╡р╣Йр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
        let prompt = "р╕зр╕┤р╕зр╕Кр╣Ир╕зр╕вр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕гр╕╣р╕Ыр╕Щр╕╡р╣Йр╣Гр╕лр╣Йр╕лр╕Щр╣Ир╕нр╕вр╕Щр╕░р╕Др╕░ ЁЯТЫ"; // Default prompt
        if (userContext[userId]) {
          // р╕Цр╣Йр╕▓р╕бр╕╡ р╣Гр╕лр╣Йр╣Гр╕Кр╣Йр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕ер╣Ир╕▓р╕кр╕╕р╕Фр╣Ар╕Ыр╣Зр╕Щ prompt
          prompt = userContext[userId].text;
          // р╕лр╕ер╕▒р╕Зр╕Ир╕▓р╕Бр╣Гр╕Кр╣Йр╣Бр╕ер╣Йр╕з р╣Гр╕лр╣Йр╕ер╕Ъ context р╕Чр╕┤р╣Йр╕Зр╣Др╕Ыр╣Ар╕ер╕в р╣Ар╕Юр╕╖р╣Ир╕нр╣Др╕бр╣Ир╣Гр╕лр╣Йр╣Гр╕Кр╣Йр╕Лр╣Йр╕│р╕Бр╕▒р╕Ър╕гр╕╣р╕Ыр╕Цр╕▒р╕Фр╣Др╕Ы
          delete userContext[userId];
        }

        const aiResponse = await callGeminiVisionAPI(prompt, imageBase64);
        await client.replyMessage(event.replyToken, { type: "text", text: aiResponse });
      }
    }
  }
  res.sendStatus(200);
});

app.get("/", (req, res) => {
  res.send("р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Др╣Ир╕▓ р╕зр╕┤р╕зр╣Ар╕нр╕Зр╕Щр╕░р╕Др╕░ ЁЯТЫ р╕Ър╕нр╕Чр╕Юр╕гр╣Йр╕нр╕бр╕Кр╣Ир╕зр╕вр╕Хр╕нр╕Ър╣Бр╕ер╣Йр╕зр╕Др╣Ир╕░ р╕Цр╕▓р╕бр╣Др╕Фр╣Йр╣Ар╕ер╕вр╕Щр╣Йр╕▓~");
});

module.exports = app;