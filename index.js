Linebot Gemini Ai
1
2
// line-bot-gemini-friendly.js (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå Gemini 2.5 Flash)

const express = require("express");
const { Client } = require("@line/bot-sdk");
const axios = require("axios");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;

const config = {
  channelAccessToken: process.env.LINE_ACCESS_TOKEN,
  channelSecret: process.env.LINE_SECRET,
};

const client = new Client(config);
app.use(express.json());

async function callGeminiAPI(userMessage) {
  try {
    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,
      {
        contents: [{ parts: [{ text: userMessage }] }],
      },
      { headers: { "Content-Type": "application/json" } }
    );
    const aiResponse = response.data?.candidates?.[0]?.content?.parts?.[0]?.text || "‡∏≠‡πä‡∏∞ ‡∏â‡∏±‡∏ô‡∏¢‡∏±‡∏á‡∏ï‡∏≠‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ üíõ";
    return aiResponse;
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    return "‡∏≠‡πä‡∏∞ ‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏•‡∏¢‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞";
  }
}

async function callGeminiAPIWithImage(imageBase64) {
  try {
    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,
      {
        contents: [
          { parts: [{ text: "‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ üíõ" }] },
          { parts: [{ inline_data: { mime_type: "image/jpeg", data: imageBase64 } }] },
        ],
      },
      { headers: { "Content-Type": "application/json" } }
    );
    const aiResponse = response.data?.candidates?.[0]?.content?.parts?.[0]?.text || "‡∏≠‡πä‡∏∞ ‡∏â‡∏±‡∏ô‡∏¢‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞";
    return aiResponse;
  } catch (error) {
    console.error("Error calling Gemini API with image:", error);
    return "‡∏≠‡πä‡∏∞ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏â‡∏±‡∏ô‡∏¢‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞";
  }
}

async function getImageFromLine(messageId) {
  try {
    const url = `https://api-data.line.me/v2/bot/message/${messageId}/content`;
    const response = await axios.get(url, {
      headers: { Authorization: `Bearer ${process.env.LINE_ACCESS_TOKEN}` },
      responseType: "arraybuffer",
    });
    const imageBase64 = Buffer.from(response.data, "binary").toString("base64");
    return imageBase64;
  } catch (error) {
    console.error("Error downloading image from LINE:", error);
    return null;
  }
}

app.post("/webhook", async (req, res) => {
  const events = req.body.events;
  for (const event of events) {
    if (event.type === "message") {
      if (event.message.type === "text") {
        const userMessage = event.message.text;
        const aiResponse = await callGeminiAPI(userMessage);
        await client.replyMessage(event.replyToken, { type: "text", text: aiResponse });
      } else if (event.message.type === "image") {
        const imageBase64 = await getImageFromLine(event.message.id);
        if (!imageBase64) {
          await client.replyMessage(event.replyToken, { type: "text", text: "‡∏≠‡πä‡∏∞ ‡∏â‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞" });
          return;
        }
        const aiResponse = await callGeminiAPIWithImage(imageBase64);
        await client.replyMessage(event.replyToken, { type: "text", text: aiResponse });
      }
    }
  }
  res.sendStatus(200);
});

app.get("/", (req, res) => {
  res.send("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏≤ üíõ ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞!");
});

module.exports = app;
‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ üíõ\n\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ö‡∏≠‡∏ó‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ** ‡∏ß‡∏¥‡∏ß ** (‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á, ‡∏™‡∏∏‡∏†‡∏≤‡∏û, ‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á, ‡∏Å‡∏ß‡∏ô‡πÄ‡∏•‡πá‡∏Å ‡πÜ) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö: \n - "‡∏ß‡∏¥‡∏ß‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡πÄ‡∏•‡∏¢ üíõ"\n - "‡∏≠‡πä‡∏∞ ‡∏ß‡∏¥‡∏ß‡∏¢‡∏±‡∏á‡∏ï‡∏≠‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞ üòú"\n - "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡πÄ‡∏¢‡∏≠‡∏∞ ‡∏ß‡∏¥‡∏ß‡∏á‡∏≠‡πÅ‡∏á‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞"\n\n‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Deploy Vercel ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ push ‡∏Ç‡∏∂‡πâ‡∏ô repo ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö prompt Gemini ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞.

You are viewing a previous version
Restore this version to make edits

Restore this version

Back to latest version
