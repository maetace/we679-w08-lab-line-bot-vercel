// line-bot-vyw-gemini.js (р╕зр╕┤р╕з р╣Ар╕зр╕нр╕гр╣Мр╕Кр╕▒р╕Щр╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Юр╣Др╕Фр╣Й)

const express = require("express");
const { Client } = require("@line/bot-sdk");
const axios = require("axios");
// *** NEW: р╕Щр╕│р╣Ар╕Вр╣Йр╕▓р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Ю ***
const { image_generation } = require("./api_definitions"); // р╕кр╕бр╕бр╕Хр╕┤р╕зр╣Ир╕▓ tool р╕нр╕вр╕╣р╣Ир╣Гр╕Щр╣Др╕Яр╕ер╣Мр╕Щр╕╡р╣Й
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;

const config = {
  channelAccessToken: process.env.LINE_ACCESS_TOKEN,
  channelSecret: process.env.LINE_SECRET,
};

const client = new Client(config);
app.use(express.json());

const userContext = {};

// --- START: NEW Image Generation Feature ---

/**
 * р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕гр╕╡р╕вр╕Б Image Generation API
 * @param {string} prompt р╕Др╕│р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕ар╕▓р╕Юр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕З
 * @returns {string | null} trс║г vс╗Б content_id р╕Вр╕нр╕Зр╕ар╕▓р╕Ю р╕лр╕гр╕╖р╕н null р╕Цр╣Йр╕▓р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И
 */
async function generateImageFromPrompt(prompt) {
  console.log(`Generating image for prompt: "${prompt}"`);
  try {
    // р╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Й image_generation tool
    const imageResult = await image_generation.generate_images({
      prompts: [prompt],
      image_generation_usecase: image_generation.ImageGenerationUsecase.ALTERNATIVES,
    });

    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М
    const contentId = imageResult?.results?.[0]?.content_id;
    const generatedImages = imageResult?.results?.[0]?.generated_images;

    if (contentId && generatedImages && generatedImages.length > 0) {
      console.log(`Image generated successfully. Content ID: ${contentId}`);
      return contentId; // р╕кр╣Ир╕Зр╕Др╕╖р╕Щ ID р╕Вр╕нр╕Зр╕ар╕▓р╕Юр╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Фр╣Йр╕кр╕│р╣Ар╕гр╣Зр╕И
    } else {
      console.error("Image generation failed. No image returned from API.");
      return null;
    }
  } catch (error) {
    console.error("Error calling Image Generation API:", error);
    return null;
  }
}

// --- END: NEW Image Generation Feature ---


async function callGeminiVisionAPI(prompt, imageBase64) {
  try {
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${process.env.GEMINI_API_KEY}`;
    const requestBody = {
      contents: [{
        parts: [
          { text: prompt },
          { inline_data: { mime_type: "image/jpeg", data: imageBase64 } },
        ],
      }],
    };
    const response = await axios.post(apiUrl, requestBody, { headers: { "Content-Type": "application/json" } });
    return response.data?.candidates?.[0]?.content?.parts?.[0]?.text || "р╕нр╣Кр╕░ р╕зр╕┤р╕зр╕вр╕▒р╕Зр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕ар╕▓р╕Юр╕Щр╕╡р╣Йр╣Др╕бр╣Ир╣Др╕Фр╣Йр╣Ар╕ер╕в р╕ер╕нр╕Зр╣Гр╕лр╕бр╣Ир╕Щр╕░р╕Др╕░ ЁЯШЬ";
  } catch (error) {
    console.error("Error calling Gemini Vision API:", error.response?.data || error.message);
    return "р╕зр╕┤р╕зр╕Вр╕нр╣Вр╕Чр╕йр╕Щр╕░р╕Др╕░ р╕Хр╕нр╕Щр╕Щр╕╡р╣Йр╕вр╕▒р╕Зр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕ар╕▓р╕Юр╕Щр╕╡р╣Йр╣Др╕бр╣Ир╣Др╕Фр╣Й р╕ер╕нр╕Зр╣Гр╕лр╕бр╣Ир╕нр╕╡р╕Бр╕Чр╕╡р╕Щр╕░р╕Др╕░ ЁЯТЫ";
  }
}

async function callGeminiAPI(userMessage) {
  try {
    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${process.env.GEMINI_API_KEY}`,
      { contents: [{ parts: [{ text: userMessage }] }] },
      { headers: { "Content-Type": "application/json" } }
    );
    return response.data?.candidates?.[0]?.content?.parts?.[0]?.text || "р╕нр╣Кр╕░ р╕зр╕┤р╕зр╕вр╕▒р╕Зр╕Хр╕нр╕Ър╣Ар╕гр╕╖р╣Ир╕нр╕Зр╕Щр╕╡р╣Йр╣Др╕бр╣Ир╣Др╕Фр╣Йр╣Ар╕ер╕в р╕ер╕нр╕Зр╕Цр╕▓р╕бр╣Гр╕лр╕бр╣Ир╕Щр╕░р╕Др╕░ ЁЯШЬ";
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    return "р╕Вр╕нр╣Вр╕Чр╕йр╕Щр╕░р╕Др╕░ р╕Хр╕нр╕Щр╕Щр╕╡р╣Йр╕Др╕Щр╣Гр╕Кр╣Йр╣Ар╕вр╕нр╕░ р╕зр╕┤р╕зр╕Зр╕нр╣Бр╕Зр╕Щр╕┤р╕Фр╕Щр╕╢р╕З р╕ер╕нр╕Зр╣Гр╕лр╕бр╣Ир╕нр╕╡р╕Бр╕Чр╕╡р╕Щр╕░р╕Др╕░ ЁЯТЫ";
  }
}

async function getImageFromLine(messageId) {
  try {
    const url = `https://api-data.line.me/v2/bot/message/${messageId}/content`;
    const response = await axios.get(url, {
      headers: { Authorization: `Bearer ${process.env.LINE_ACCESS_TOKEN}` },
      responseType: "arraybuffer",
    });
    return Buffer.from(response.data, "binary").toString("base64");
  } catch (error) {
    console.error("Error downloading image from LINE:", error);
    return null;
  }
}

app.post("/webhook", async (req, res) => {
  const events = req.body.events;
  for (const event of events) {
    if (event.type === "message") {
      const userId = event.source.userId;

      if (event.message.type === "text") {
        const userMessage = event.message.text;

        // --- START: Webhook Logic for Image Generation ---
        const imageCommand = "р╕зр╕▓р╕Фр╕гр╕╣р╕Ы";
        if (userMessage.trim().startsWith(imageCommand)) {
          // р╕Цр╣Йр╕▓р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Вр╕╢р╣Йр╕Щр╕Хр╣Йр╕Щр╕Фр╣Йр╕зр╕в "р╕зр╕▓р╕Фр╕гр╕╣р╕Ы"
          const prompt = userMessage.substring(imageCommand.length).trim();

          if (!prompt) {
            // р╕Бр╕гр╕Ур╕╡р╕Юр╕┤р╕бр╕Юр╣М "р╕зр╕▓р╕Фр╕гр╕╣р╕Ы" р╣Ар╕Йр╕вр╣Ж р╣Др╕бр╣Ир╕бр╕╡ prompt
            await client.replyMessage(event.replyToken, {
              type: "text",
              text: "р╣Др╕Фр╣Йр╣Ар╕ер╕вр╕Др╣Ир╕░! р╕нр╕вр╕▓р╕Бр╣Гр╕лр╣Йр╕зр╕┤р╕зр╕зр╕▓р╕Фр╕гр╕╣р╕Ыр╕нр╕░р╣Др╕гр╕Фр╕╡р╕Др╕░? р╕ер╕нр╕Зр╕Юр╕┤р╕бр╕Юр╣М 'р╕зр╕▓р╕Фр╕гр╕╣р╕Ы' р╕Хр╕▓р╕бр╕Фр╣Йр╕зр╕вр╕Др╕│р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕ар╕▓р╕Юр╣Др╕Фр╣Йр╣Ар╕ер╕вр╕Др╣Ир╕░ тШ║"
            });
            continue; // р╣Др╕Ыр╕вр╕▒р╕З event р╕Цр╕▒р╕Фр╣Др╕Ы
          }

          // р╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Хр╕нр╕Ър╕Бр╕ер╕▒р╕Ър╣Ар╕Ър╕╖р╣Йр╕нр╕Зр╕Хр╣Йр╕Щ р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕гр╕╣р╣Йр╕зр╣Ир╕▓р╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕│р╕Зр╕▓р╕Щ
          await client.replyMessage(event.replyToken, {
            type: "text",
            text: `р╕гр╕▒р╕Ър╕Чр╕гр╕▓р╕Ър╕Др╣Ир╕░! р╕зр╕┤р╕зр╕Бр╕│р╕ер╕▒р╕Зр╕зр╕▓р╕Фр╕ар╕▓р╕Ю "${prompt}" р╣Гр╕лр╣Йр╕нр╕вр╕╣р╣Ир╕Щр╕░р╕Др╕░ р╕гр╕нр╕кр╕▒р╕Бр╕Др╕гр╕╣р╣Ир╕Щр╣Йр╕▓... ЁЯОи`
          });

          // р╣Ар╕гр╕╡р╕вр╕Бр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Ю
          const imageId = await generateImageFromPrompt(prompt);

          if (imageId) {
            // р╕Цр╣Йр╕▓р╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Юр╕кр╕│р╣Ар╕гр╣Зр╕И р╣Гр╕лр╣Йр╕кр╣Ир╕Зр╕ар╕▓р╕Юр╕Бр╕ер╕▒р╕Ър╣Др╕Ыр╕лр╕▓р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
            // р╣Вр╕Фр╕вр╕Бр╕▓р╕г push message р╣Др╕Ы р╣Ар╕Юр╕гр╕▓р╕░р╣Ар╕гр╕▓р╣Др╕Фр╣Й reply р╣Др╕Ыр╣Бр╕ер╣Йр╕зр╣Гр╕Щр╕Хр╕нр╕Щр╣Бр╕гр╕Б
            await client.pushMessage(userId, {
              type: "text",
              text: imageId // р╕кр╣Ир╕З content_id р╣Ар╕Ыр╣Зр╕Щр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Шр╕гр╕гр╕бр╕Фр╕▓
            });
          } else {
            // р╕Цр╣Йр╕▓р╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Юр╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И
            await client.pushMessage(userId, {
              type: "text",
              text: "р╕Вр╕нр╕нр╕ар╕▒р╕вр╕Др╣Ир╕░ р╕зр╕┤р╕зр╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Юр╕Щр╕╡р╣Йр╣Др╕Фр╣Йр╣Гр╕Щр╕Хр╕нр╕Щр╕Щр╕╡р╣Й р╕ер╕нр╕Зр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Др╕│р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕лр╕гр╕╖р╕нр╕ер╕нр╕Зр╣Гр╕лр╕бр╣Ир╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕Зр╕Щр╕░р╕Др╕░"
            });
          }

        } else {
          // --- END: Webhook Logic for Image Generation ---

          // р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╣Гр╕Кр╣Ир╕Др╕│р╕кр╕▒р╣Ир╕Зр╕зр╕▓р╕Фр╕гр╕╣р╕Ы р╕Бр╣Зр╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣И logic р╕Бр╕▓р╕гр╕Цр╕▓р╕б-р╕Хр╕нр╕Ър╕Ыр╕Бр╕Хр╕┤
          userContext[userId] = { text: userMessage, timestamp: Date.now() };
          const aiResponse = await callGeminiAPI(userMessage);
          await client.replyMessage(event.replyToken, { type: "text", text: aiResponse });
        }
      } else if (event.message.type === "image") {
        // Logic р╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕гр╕╣р╕Ыр╕ар╕▓р╕Юр╕вр╕▒р╕Зр╕Др╕Зр╣Ар╕Фр╕┤р╕б
        const imageBase64 = await getImageFromLine(event.message.id);
        if (!imageBase64) {
          await client.replyMessage(event.replyToken, { type: "text", text: "р╕нр╣Кр╕░ р╕зр╕┤р╕зр╕вр╕▒р╕Зр╣Вр╕лр╕ер╕Фр╕гр╕╣р╕Ыр╕Щр╕╡р╣Йр╣Др╕бр╣Ир╣Др╕Фр╣Й р╕ер╕нр╕Зр╕кр╣Ир╕Зр╣Гр╕лр╕бр╣Ир╕нр╕╡р╕Бр╕Чр╕╡р╕Щр╕░р╕Др╕░ ЁЯШЬ" });
          return;
        }
        let prompt = "р╕зр╕┤р╕зр╕Кр╣Ир╕зр╕вр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕гр╕╣р╕Ыр╕Щр╕╡р╣Йр╣Гр╕лр╣Йр╕лр╕Щр╣Ир╕нр╕вр╕Щр╕░р╕Др╕░ ЁЯТЫ";
        if (userContext[userId]) {
          prompt = userContext[userId].text;
          delete userContext[userId];
        }
        const aiResponse = await callGeminiVisionAPI(prompt, imageBase64);
        await client.replyMessage(event.replyToken, { type: "text", text: aiResponse });
      }
    }
  }
  res.sendStatus(200);
});

app.get("/", (req, res) => {
  res.send("р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Др╣Ир╕▓ р╕зр╕┤р╕зр╣Ар╕нр╕Зр╕Щр╕░р╕Др╕░ ЁЯТЫ р╕Ър╕нр╕Чр╕Юр╕гр╣Йр╕нр╕бр╕Кр╣Ир╕зр╕вр╕Хр╕нр╕Ъ, р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕ар╕▓р╕Ю, р╣Бр╕ер╕░р╕зр╕▓р╕Фр╕ар╕▓р╕Юр╣Гр╕лр╣Йр╣Бр╕ер╣Йр╕зр╕Др╣Ир╕░!");
});

module.exports = app;